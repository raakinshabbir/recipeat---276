<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=0.5">
  <title>Liked Recipes</title>
  <style>
#liked-recipes-list {
  max-height: 80vh;
  overflow-y: auto;
  padding: 30px;
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 15px;
  box-shadow: 0px 5px 20px rgba(0, 0, 0, 0.1);
  text-align: center; /* Center-aligns the text inside the container */
}

#liked-recipes-list h1 {
font-size: 2em;
  color: #333;
  margin-bottom: 20px;
  text-align: center;
  font-family: "Trebuchet MS", Tahoma, sans-serif;
  font-weight: 700;
  font-style: italic;
}

#recipes {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Responsive grid */
  gap: 20px;
  list-style: none;
  padding: 0;
  margin: 0;
}

  .recipe-card {
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .recipe-card img {
    max-width: 100%;
    max-height: 200px;
    border-radius: 8px;
    object-fit: cover;
    margin-bottom: 15px;
  }

  .recipe-card h2 {
    font-size: 1.2em;
    margin: 10px 0;
    font-weight: bold;
  }

  .recipe-card a {
    color: black; /* Set link text color to black */
    text-decoration: none; /* Optional: remove underline */
  }

  .recipe-card a:hover {
    color: #007bff; /* Optional: change color on hover */
  }

  .btn {
    padding: 8px 16px;
    margin: 5px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
  }

  .btn-primary {
    background-color: #007bff;
    color: white;
  }

  .btn-danger {
    background-color: #dc3545;
    color: white;
  }
</style>

</head>
<body>
  <center>
    <div id="liked-recipes-list">
      <h1>Liked Recipes</h1>
      <ul id="recipes">
        <!-- Each liked recipe will be appended here -->
      </ul>
    </div>
  </center>
</body>

    <script>
      fetch('/liked.json', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => response.json())
      .then(likedRecipes => {
        const recipesList = document.getElementById('recipes');

        if (likedRecipes.length === 0) {
          recipesList.innerHTML = '<li class="recipe-card">No liked recipes yet!</li>';
        } else {
          likedRecipes.forEach(recipe => {
            const li = document.createElement('li');
            li.className = 'recipe-card';
            const recipePath = `/recipes/${recipe.id}`;
            li.innerHTML = `
              <img src="${recipe.image_url}" alt="${recipe.title}" />
              <h2><a href="${recipePath}">${recipe.title}</a></h2>
              <div>
                <button onclick="unlikeRecipe(${recipe.id})" class="btn btn-danger">Unlike</button>
              </div>
            `;
            recipesList.appendChild(li);
          });
        }
      });

      function unlikeRecipe(recipeId) {
        fetch(`/recipes/${recipeId}/liked`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'Recipe unliked successfully') {
            location.reload();
          }
        });
      }
    </script>
  </center>
</body>
</html>
